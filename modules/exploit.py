#! /usr/bin/python
#coding:utf-8

'''prototype of exploit'''
if __name__ == "__main__":
    import sys,os
    sys.path.append(os.path.abspath("../"))

from modules.script_tools import *

class VRL_Exploit():

    def frame_check(self):
        '''return 0 if frame_check failed'''
        import os, sys, json

        if not hasattr(self, 'run') :
            print '[Error]: The exploit does not have a run function!.'
            return 0
        if not hasattr(self, 'vulnerability'):
            print 'Warning: The exploit does not have a default target vulnerability.'
        if not hasattr(self, 'options'):
            print '[Error]: The exploit does not have options!'
            return 0
        if not hasattr(self, 'default_payload'):
            print 'Warning: The exploit can not change payload.'
        else:
            self.payload=''
            print ">Exploit has a default payload, loading..."
            self.frame_update_payload(name='',root_path='../../')
            #if self.default_payload + '.json' in str(os.listdir('./payloads')):
            #    try:
            #        with open('./payloads/' + self.default_payload + '.json', 'r') as f:
            #            json_data = json.load(f)
            #            class _tmp_pay(object):
            #                info = ''
            #                data = ''
            #            pay = _tmp_pay()
            #            pay.data = eval("str('" + json_data['data'] + "')")  # This is unsafe, and ugly.
            #            self.payload = pay.data
            #            print ">Default payload: '" + self.default_payload+ "' loaded."
            #    except Exception, e:
            #        print '[Error]: ', e
            #        return 0

            ## try .py
            #else:
            #    try:
            #        _temp = __import__('payloads.' + self.default_payload, globals(), locals(),
            #                           fromlist=['Payload'])
            #        Payload = _temp.Payload
            #        pay = Payload()
            #        self.payload = pay.data
            #        print ">Default payload: '" + self.default_payload+ "' loaded."
            #    except Exception, e:
            #        print '[Error]: ', e
            #        return 0

            #if not hasattr(self, 'supported_payload') :
            #    print 'Warring: The exploit support changing payload but has no supported_payload.'
            if not hasattr(self, 'payload_requirement') :
                print 'Warring: The exploit support changing payload but has no payload_requirement information.'
        print 'Check Finished!'
        return 1

    def frame_print_info(self):
        if hasattr(self, 'info'):
            print_line('Exploit inFormation:')
            print self.info
        else:
            print colorize('[Error]: ', 'red'), 'This exploit has no info.'

    def frame_update_payload(self, name='', root_path='.', need_confirm=False):
        if not name:
            if hasattr(self, 'payload_name'):
                payload_name = self.payload_name
            elif hasattr(self, 'default_payload'):
                payload_name = self.default_payload
            else:
                print colorize('[Error]: ', 'red'), 'No payload selected.'
                return False
        else:
            payload_name = name

        self.payload = ''

        path = root_path+r'/payloads/'
        # try .json
        if payload_name + '.json' in os.listdir(path):
            try:
                with open(path + payload_name + '.json', 'r') as f:
                    json_data = json.load(f)
                    if need_confirm:
                        print ">Payload info:"
                        print json_data['info']
                        c = raw_input("Are you sure to use the payload?(y/n):(y)")
                        if not c or c[0] != 'n':
                            data = eval("str('" + json_data['data'] + "')")
                            self.payload = data
                            print ">Payload: '" + payload_name + "' loaded."
                            return True
                        else:
                            return False
                    else:
                        data = eval("str('" + json_data['data'] + "')")
                        self.payload = data
                        print ">Payload: '" + payload_name + "' loaded."
                        return True

            except Exception, e:
                print colorize('[Error]:', 'red'), e
                return False

        # try .py
        else:
            try:
                _temp = __import__('payloads.' + payload_name, globals(), locals(),
                                   fromlist=['Payload'])
                Payload = _temp.Payload
                pay = Payload()
                if need_confirm:
                    if hasattr(self, 'payload_requirement'):
                        print '>Payload requirements of the exploit:\n', self.payload_requirement
                    c = raw_input(">Payload info:\n" + pay.info + "\nAre you sure to use the payload?(y/n):(y)")
                    if not c or c[0] != 'n':
                        self.payload = pay.data
                        print ">Payload: '" + payload_name + "' loaded."
                        return True
                    else:
                        return False
                else:
                    self.payload = pay.data
                    print ">Payload: '" + payload_name + "' loaded."
                    return True
            except Exception, e:
                print '[Error]: ', e
                return False

    @staticmethod
    def frame_load(name, root_path):
        module_path = 'exploits.' + name + '.run'
        try:
            _temp = __import__(module_path, globals(), locals(), fromlist=['Exploit'])
            Exploit = _temp.Exploit
            exp = Exploit()
            print 'Exploit Loaded.'
            exp.frame_path = root_path + r'/exploits/' + name + r'/'
            exp.frame_print_info()
            if hasattr(exp, 'vulnerability') and exp.vulnerability:
                print_line('Supported vulnerabilities:')
                if type(exp.vulnerability) == str:
                    print exp.vulnerability
                elif type(exp.vulnerability) == list:
                    for i in exp.vulnerability:
                        print i
            if hasattr(exp, 'supported_payload'):
                print_line('Supported payloads:')
                if type(exp.supported_payload) == str:
                    print exp.supported_payload
                elif type(exp.supported_payload) == list:
                    for i in exp.supported_payload:
                        print i
            print_line('')
            return exp

        except Exception, e:
            print colorize('[Error]: ', 'red'), e
            return None

    def frame_set(self, dict):
        updated = False
        for (k, v) in dict.items():
            if k in self.options.keys():
                self.options[k] = v
                updated = True
        return updated


if __name__=='__main__':
    print 'Prototype of exploit, read documents for more information.\n'
